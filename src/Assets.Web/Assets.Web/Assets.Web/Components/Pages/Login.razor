@page "/Login"
@using Assets.Web.Shared
@layout LoginLayout

@using System.ComponentModel.DataAnnotations
@using Assets.Web.Components.Account
@using Assets.Web.Components.Account.Shared
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Assets.Web.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="text-center mb-4">
    <img src="https://dummyimage.com/180x60/000/fff.png&text=Logo" alt="Logo" style="width: 180px;" class="mb-2" />
    <h2 class="mb-0">
        <span class="text-primary">Azunt</span>
        <span class="text-warning">Login</span>
    </h2>
</div>

<div class="azunt-login-inner-box">
    <div class="mb-4">
        <i class="fas fa-user-check"></i>
        <h3 class="mb-0">User Login</h3>
    </div>

    <div class="azunt-login-warning" role="alert">
        You are accessing a restricted information system. Usage may be monitored and audited.<br />
        Unauthorized use may result in penalties. Follow your organization's security policies.
    </div>

    <StatusMessage Message="@errorMessage" />
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <ValidationSummary class="validation-summary-errors" style="list-style: none; padding-left: 0;" role="alert" />

        <div class="form-floating mb-3 text-start">
            <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" placeholder="Email" autocomplete="username" />
            <label for="Input.Email">Email</label>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>

        <div class="form-floating mb-3 text-start">
            <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" placeholder="Password" autocomplete="current-password" />
            <label for="Input.Password">Password</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>

        <div class="d-flex justify-content-between align-items-center mb-3 text-start flex-wrap">
            <div class="form-check">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMeCheck" />
                <label for="rememberMeCheck" class="form-check-label">Remember me</label>
            </div>
            <div class="small">
                <a href="Account/ForgotPassword">Forgot your password?</a>
            </div>
        </div>

        <div class="d-grid mb-3">
            <button type="submit" class="btn btn-primary btn-lg">Log in</button>
        </div>
    </EditForm>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new()
                {
                    ["returnUrl"] = ReturnUrl,
                    ["rememberMe"] = Input.RememberMe
                });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
